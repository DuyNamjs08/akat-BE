pipeline {
    agent any

    tools {
        nodejs 'Node20'
    }

    environment {
        DEPLOY_DIR = '/var/www/akat-BE' // Th∆∞ m·ª•c deploy tr√™n VPS
        SSH_CREDENTIALS_ID = 'vps-ssh-key' // ID c·ªßa SSH credentials tr√™n Jenkins
        VPS_USER = 'root' // Ng∆∞·ªùi d√πng tr√™n VPS
        VPS_IP = '103.82.24.164' // ƒê·ªãa ch·ªâ IP c·ªßa VPS
    }

    stages {
        stage('Ki·ªÉm tra tr∆∞·ªõc deploy') {
            steps {
                sh """
                    echo "üìå Th∆∞ m·ª•c hi·ªán t·∫°i: \$(pwd)"
                    echo "üìå N·ªôi dung th∆∞ m·ª•c workspace:"
                    ls -la
                """
            }
        }

        stage('Checkout & Setup') {
            steps {
                script {
                    // Checkout m√£ ngu·ªìn t·ª´ SCM (Git)
                    checkout scm

                    // Debug: In tr·∫°ng th√°i Git ƒë·ªÉ ki·ªÉm tra
                    sh 'git status'
                    sh 'git branch -a'

                    // Thi·∫øt l·∫≠p BRANCH_NAME
                    env.BRANCH_NAME = env.BRANCH_NAME ?: (env.GIT_BRANCH ? env.GIT_BRANCH.replace('origin/', '') : sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim())
                    echo "Branch hi·ªán t·∫°i l√†: ${env.BRANCH_NAME}"

                    // Ki·ªÉm tra n·∫øu BRANCH_NAME l√† HEAD
                    if (env.BRANCH_NAME == 'HEAD') {
                        error "Repository ·ªü tr·∫°ng th√°i detached HEAD. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh SCM ho·∫∑c branch."
                    }
                }
                // C√†i ƒë·∫∑t th∆∞ vi·ªán
                sh 'npm ci'
            }
        }

        stage('Lint & Test') {
            steps {
                sh 'npm run lint'
            }
        }

        stage('Build') {
            steps {
                sh 'npm run build' // Build ra th∆∞ m·ª•c dist/
                archiveArtifacts artifacts: 'dist/**/*', fingerprint: true
            }
        }

        stage('Deploy') {
            when {
                expression { env.BRANCH_NAME == 'master' }
            }
            steps {
                script {
                    echo "Deploying on branch: ${env.BRANCH_NAME}"

                    // Ki·ªÉm tra th∆∞ m·ª•c dist/
                    sh 'test -d dist/ || { echo "Th∆∞ m·ª•c dist/ kh√¥ng t·ªìn t·∫°i!"; exit 1; }'

                    // Debug: Ki·ªÉm tra SSH key
                    sh 'ssh-add -l || { echo "Kh√¥ng c√≥ SSH key n√†o ƒë∆∞·ª£c th√™m"; }'

                    sshagent(credentials: [SSH_CREDENTIALS_ID]) {
                        sh """
                            set -x  # B·∫≠t ch·∫ø ƒë·ªô debug
                            echo "üîÑ ƒêang deploy l√™n ${DEPLOY_DIR}..."
                            echo "Th√¥ng tin m√¥i tr∆∞·ªùng:"
                            echo "VPS_USER: ${VPS_USER}"
                            echo "VPS_IP: ${VPS_IP}"
                            echo "DEPLOY_DIR: ${DEPLOY_DIR}"

                            # Debug: Ki·ªÉm tra SSH connection
                            ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_IP} 'whoami' || { echo "L·ªói khi k·∫øt n·ªëi SSH"; exit 1; }

                            # 1. ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i v√† ƒë√∫ng quy·ªÅn
                            ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_IP} 'mkdir -p ${DEPLOY_DIR}/dist && chown -R \$(whoami) ${DEPLOY_DIR}' || { echo "L·ªói khi t·∫°o th∆∞ m·ª•c tr√™n VPS"; exit 1; }

                            # 2. Ki·ªÉm tra file build
                            echo "üì¶ N·ªôi dung th∆∞ m·ª•c dist/:"
                            ls -la dist/

                            # 3. Sao ch√©p th∆∞ m·ª•c dist/ b·∫±ng scp (thay rsync)
                            scp -r dist/ ${VPS_USER}@${VPS_IP}:${DEPLOY_DIR}/dist/ || { echo "L·ªói khi scp th∆∞ m·ª•c dist/"; exit 1; }

                            # 4. Sao ch√©p file ecosystem.config.js
                            scp ecosystem.config.js ${VPS_USER}@${VPS_IP}:${DEPLOY_DIR}/ || { echo "L·ªói khi scp ecosystem.config.js"; exit 1; }

                            # 5. Ki·ªÉm tra v√† restart PM2
                            echo "üîÑ Danh s√°ch ·ª©ng d·ª•ng PM2:"
                            ssh ${VPS_USER}@${VPS_IP} 'pm2 list' || { echo "L·ªói khi li·ªát k√™ PM2"; exit 1; }

                            echo "üöÄ Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng..."
                            ssh ${VPS_USER}@${VPS_IP} 'pm2 restart ${DEPLOY_DIR}/ecosystem.config.js' || { echo "L·ªói khi restart PM2"; exit 1; }
                            ssh ${VPS_USER}@${VPS_IP} 'pm2 save' || { echo "L·ªói khi l∆∞u PM2"; exit 1; }

                            echo "üìã Logs ·ª©ng d·ª•ng:"
                            ssh ${VPS_USER}@${VPS_IP} 'pm2 logs' || { echo "L·ªói khi xem logs PM2"; exit 1; }
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline ho√†n t·∫•t."
        }
        success {
            echo "Deploy th√†nh c√¥ng tr√™n branch ${env.BRANCH_NAME}!"
        }
        failure {
            echo "Pipeline th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra log ƒë·ªÉ bi·∫øt chi ti·∫øt."
        }
    }
}