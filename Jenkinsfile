pipeline {
    agent any

    tools {
        nodejs 'Node20'
    }

    environment {
        DEPLOY_DIR = '/var/www/akat-BE' // Th∆∞ m·ª•c deploy tr√™n VPS, thay ƒë·ªïi n·∫øu c·∫ßn
        SSH_CREDENTIALS_ID = 'vps-ssh-key' // ID c·ªßa SSH credentials tr√™n Jenkins
        VPS_USER = 'root' // Ng∆∞·ªùi d√πng tr√™n VPS, thay ƒë·ªïi n·∫øu c·∫ßn
        VPS_IP = '103.82.24.164' // ƒê·ªãa ch·ªâ IP c·ªßa VPS, thay ƒë·ªïi n·∫øu c·∫ßn
    }

    stages {
        stage('Ki·ªÉm tra tr∆∞·ªõc deploy') {
            steps {
                sh """
                    echo "üìå Th∆∞ m·ª•c hi·ªán t·∫°i: \$(pwd)"
                    echo "üìå N·ªôi dung th∆∞ m·ª•c ${DEPLOY_DIR}:"
                    ls -la ${DEPLOY_DIR}/
                """
            }
        }

        stage('Checkout & Pull Code') {
            steps {
                script {
                    // Pull code m·ªõi nh·∫•t t·ª´ Git repository n·∫øu ƒë√£ c√≥ th∆∞ m·ª•c
                    if (fileExists(DEPLOY_DIR)) {
                        dir(DEPLOY_DIR) {
                            sh 'git pull origin master'
                        }
                    } else {
                        // N·∫øu ch∆∞a c√≥ th∆∞ m·ª•c, checkout t·ª´ git
                        checkout scm
                    }
                }
                // C√†i ƒë·∫∑t th∆∞ vi·ªán sau khi pull code
                sh 'npm ci'
            }
        }

        // Stage 2: Ki·ªÉm tra ch·∫•t l∆∞·ª£ng m√£ ngu·ªìn
        stage('Lint & Test') {
            steps {
                sh 'npm run lint'
            }
        }

        // Stage 3: Build
        stage('Build') {
            steps {
                sh 'npm run build' // build ra th∆∞ m·ª•c dist/
                archiveArtifacts artifacts: 'dist/**/*', fingerprint: true
            }
        }
        stage('Ki·ªÉm tra branch') {
            steps {
                script {
                    // In gi√° tr·ªã c·ªßa BRANCH_NAME ƒë·ªÉ ki·ªÉm tra
                    echo "Gi√° tr·ªã c·ªßa BRANCH_NAME l√†: ${env.BRANCH_NAME}"
                    
                    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán n·∫øu BRANCH_NAME c√≥ gi√° tr·ªã
                    if (env.BRANCH_NAME) {
                        echo "Branch ƒëang s·ª≠ d·ª•ng l√†: ${env.BRANCH_NAME}"
                    } else {
                        echo "Bi·∫øn BRANCH_NAME kh√¥ng c√≥ gi√° tr·ªã ho·∫∑c kh√¥ng t·ªìn t·∫°i!"
                    }
                }
            }
        }
        stage('Set Branch Name') {
            steps {
                script {
                    env.BRANCH_NAME = env.BRANCH_NAME ?: sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
                    echo "Branch hi·ªán t·∫°i l√†: ${env.BRANCH_NAME}"
                }
            }
        }
        // Stage 4: Deploy n·ªôi b·ªô (tr√™n VPS)
        stage('Deploy') {
            steps {
                script {
                    echo "Branch hi·ªán t·∫°i l√†: ${env.BRANCH_NAME}"
                    
                    // ƒêi·ªÅu ki·ªán ki·ªÉm tra branch c√≥ ph·∫£i l√† master kh√¥ng
                    if (env.BRANCH_NAME == 'master') {
                        sshagent(credentials: [SSH_CREDENTIALS_ID]) { // S·ª≠ d·ª•ng SSH key t·ª´ Jenkins Credentials
                            sh """
                                set -x  # B·∫≠t ch·∫ø ƒë·ªô debug
                                echo "üîÑ ƒêang deploy l√™n ${DEPLOY_DIR}..."
                                echo "Th√¥ng tin m√¥i tr∆∞·ªùng:"
                                echo "VPS_USER: ${VPS_USER}"
                                echo "VPS_IP: ${VPS_IP}"
                                echo "DEPLOY_DIR: ${DEPLOY_DIR}"

                                # 1. ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i v√† ƒë√∫ng quy·ªÅn
                                ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_IP} 'mkdir -p ${DEPLOY_DIR} && chown -R \$(whoami) ${DEPLOY_DIR}'

                                # 2. Ki·ªÉm tra file build
                                echo "üì¶ N·ªôi dung th∆∞ m·ª•c dist/:"
                                ls -la dist/

                                # 3. ƒê·ªìng b·ªô file v·ªõi output chi ti·∫øt
                                rsync -avz --delete --progress dist/ ${VPS_USER}@${VPS_IP}:${DEPLOY_DIR}/dist/
                                scp ecosystem.config.js ${VPS_USER}@${VPS_IP}:${DEPLOY_DIR}/

                                # 4. Ki·ªÉm tra v√† restart PM2
                                echo "üîÑ Danh s√°ch ·ª©ng d·ª•ng PM2:"
                                ssh ${VPS_USER}@${VPS_IP} 'pm2 list'

                                echo "üöÄ Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng..."
                                ssh ${VPS_USER}@${VPS_IP} 'pm2 restart ${DEPLOY_DIR}/ecosystem.config.js'
                                ssh ${VPS_USER}@${VPS_IP} 'pm2 save'

                                echo "üìã Logs ·ª©ng d·ª•ng:"
                                ssh ${VPS_USER}@${VPS_IP} 'pm2 logs'
                            """
                        }
                    } else {
                        echo "üìå B·ªè qua deploy v√¨ kh√¥ng ph·∫£i branch master"
                    }
                }
            }
        }
    }
}
